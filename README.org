#+author: Sergei Pashakhin
#+title: My ~init.el~
#+DATE: <2022-06-21 Tue>
#+EMAIL: pashakhin@gmail.com
* Introduction
This file documents my GNU Emacs configuration, and explains my choices in this process. This file is intended to be perpetually a work in progress.

Should you use this config? Probably, not. As of yet, it is incomplete and messy. The startup time of this config on my MBP (2015) is 26.032273 second. Some packages here may not work as I want them to work, and there might be some conflicts between them. This is mostly due to my ignorance and the WIP nature of the document. There are better configs and resources explaining GNU Emacs and how to use it. For instance, see:

- Excellent [[https://systemcrafters.net/videos/][video series]] by David Wilson;
- Get inspired by [[https://plain-text.co/][The Plain Person's Guide to Plain Text Social Science]] by Kieran Healy;
- Read [[https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html][the manual]];
- Take a look at this [[https://github.com/jkitchin/scimax][cool starterkit]] for scientist by John Kitchen and learn about GNU Emacs on his [[https://www.youtube.com/c/JohnKitchin][youtube channel]].

For whom this document? Mostly, it is for my future self. But you are welcome to read it too. I have an ambition to turn it into a good resource for my students who may get interested in GNU Emacs and the hidden curriculum (I may explain this later).
* Why I use GNU Emacs
I have come to realize that I am a writer. I use writing
- to think,
- to write academic manuscripts,
- to organize my projects,
- to communicate with: computes (code), other humans and myself.

  My life demands from me a lot of writing.

To keep this part of my life functional, I need a robust system that:

- independent from a centralized institution that owns the system and can render it unusable to me;
- transparent in what and how it does what I aim to do;
- does not require money from me to keep using it;
- supported by a good community that can help me solve my problems with a system;
- surrounded by smart and decent humans from whom it is a privilege to learn;
- covers all aspects of my writing and can be extended to cover any arising needs in the writing part of my life.

To learn that I have these needs was a journey. Some of them I could only understand when I started exploring GNU Emacs, and when I  learned the role of R and Python communities in science. Other needs I learned through frustrating experience with tools and approaches I was exposed to during my education and work. Through poverty and precariousness, I learned the rest of them. I do not wish it upon myself or anyone else to go through this journey, when it is perfectly possible to avoid. That is why I write this document.

Ultimately, what I gain from this writing, GNU Emacs and its community, is the level of autonomy and security that is not provided to me by any other tool. For instance, if I want to change something in GNU Emacs, I can do it either myself or with the help from the community. If I want to do anything, it is more likely than not that I can to do it with GNU Emacs. At first, it can be hard to understand. But if you have personal experience of maintenance of a thing or a tool, you can grasp it though it. It is like gardening, arranging a life of your character in a Sims game or building your character in a RPG, maintaining your favorite bicycle or setting up your new laptop for digital life and work. It is the similar feeling and process resulting in a state that you find the most appropriate for yourself. And the end result enables you to flow in whatever you do with it while experiencing joy and satisfaction.
** It is like riding a bicycle
The bicycle metaphor is really great at highlighting another important point in my answer. How come a human can learn to ride a bicycle and then after  years without actually doing it they can hop on and ride it again? Once you know how to ride, you do not have to be aware of you leg and arm movements to ride. This complex task is delegated to the part of the brain that can manage with little input from the conscious.

Is it possible, then, to have the same level of fluidity with the tasks involving a computer and writing? Yes, just look at the history of typewriters. Take a look at this BBC video ([[https://www.youtube.com/watch?v=b6URa-PTqfA][Youtube]], 12min). Typing was an actual trade. You could complete a course on typing and find a job where you just type stuff other people say or write. You can still find such a course and learn how to stop staring on your keyboard. Your fingers will just move automatically and the words will appear on your screen. It is amazing. But what about the other stuff you have do on your computer that does not involve typing?

There are too many stuff to click on. Let's get back to the BBC video: take a look at screens or their absence. To use your computer for writing, you do not need to use your mouse. With the help from my fingers and an arm, this arrow on the screen has to traverse thousand of pixels, navigate through lands of menus and forests of buttons just to put a page number on my document. I am tired of this nonsense. I have become reluctant sparing my precious little focus points on such stuff. Because I learned that there is a better deal: spend your focus points on thinking and let your fingers type their way though the nonsense of navigating your menus and buttons. To get the deal, you have to learn how to ride your computer with hot keys or key bindings.

By design, you do not have to use your mouse at all to use GNU Emacs. Everything is done by pressing buttons on the keyboard. It is fast, straightforward and easy. You can stop the annoying nonsense of clicking through tabs, menus, and buttons on the screen to do something as simple as drawing a table or fixing indentation of list items. Typing is faster than writing by hand and navigating with the mouse. With practice you can internalize this skill the same way you internalize the skill of riding a bicycle. My mind is freer when I type, my focus improves, and it make easier for me to handle my procrastination and writing blocks. So far, I have no ideas why this is so helpful for me. 
* How this document is organized
My aim is to break down my ~init.el~ by meaningful tasks that I do with GNU Emacs. I realize that some thing require linear order to present for GNU Emacs unlike the human brain. I will point it out when necessary. First, I will discuss the core set up underlining every other task. Then, I discuss the visual aspect of my GNU Emacs. The rest will be presented by specific tasks: general writing and publishing, organizing tasks and notes, writing code, maintaining projects, and everything that  improves them.
* GNU Emacs: Installation and the bare minimum settings
At the moment, my only computer is MBP-2015 with MacOS Big Sur. I am happy with this machine, but afraid that it may break down soon. As a consequence, I try keeping it in the best shape I can. Thus, this section will be relevant only to MacOS users.

There are several ways to get GNU Emacs on your MacOS. I find that the best way is to use ~homebrew~.

#+NAME: install_emacs_brew
#+begin_src shell :eval never
  brew install emacs
#+end_src

The only downside of this installation is that you will not have the build-in support for ~SVG~ files. This might get solved later, or I may have to compile GNU Emacs myself. Unfortunately, I really need the ~SVG~ support.
** Setting up
To change anything in your GNU Emacs, you have to edit a file named ~init.el~. Usually, it is located in ~/Users/[your_username]/.emacs.d/init.el~. I enjoy this quick way of opening it:

- press =M-:= (reads =Ctrl-:= on my computer) and type the elisp command:

#+NAME: find_init_file
#+begin_src emacs-lisp :eval never
  (find-file user-init-file)
#+end_src

This will open the buffer with your ~inti.el~ in GNU Emacs. Now you can mold your GNU Emacs into anything you want by editing this file.

The first thing we have to set up is organization of the ~init.el~ and how GNU Emacs works with packages. The chunk below sets up a list of repositories where GNU Emacs should look for packages. Another thing it does is activating =use-package= which helps to organize the ~init.el~ in a neat syntax simplifying the way packages are configured.

#+NAME: use_package
#+begin_src emacs-lisp :eval never
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless 'package-archives-contents
  (package-refresh-contents))

;; initialize use-package
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

Now, we can adjust the default behavior of GNU Emacs. This chunk will make =Esc= more useful by binding to it the intuitive action of canceling the prompt for a command.

#+NAME: use_esc_key_promt
#+begin_src emacs-lisp :eval never
  ;; use ESC to cancel prompt
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

Adjust a set basic defaults:

#+NAME: initial_defaults
#+begin_src emacs-lisp :eval never
  ;; Start maximised (cross-platf)
  (add-hook 'window-setup-hook 'toggle-frame-maximized t)
  ;; stop emacs expecting that a sentence ends with double space
  (setq sentence-end-double-space nil)
  ;; stretch cursor to full char.-width, i.e. make tabs visible
  (setq x-stretch-cursor t)
  ;; show recent files with M-x recentf-open-file
  (recentf-mode 1)
  ;; automatically update buffer with changed files
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)
  (setq inhibit-startup-message t) ;; hide the startup message
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  (column-number-mode)
  ;; this boy drives me nuts on pdf-view-mode
  ;; activate line-numbers in specific modes as necessary
  ;;(global-display-line-numbers-mode t)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (global-hl-line-mode t)

  ;; disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  pdf-view-mode
                  pdf-tools))
    (add-hook mode(lambda () (setq display-line-numbers nil))))

  (setq visible-bell t)
  ;; Configure terminals

  (use-package term
    :config
    (setq explicit-shell-file-name "bash")
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

  ;; hide dot files by default
  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (define-key dired-mode-map "." 'dired-hide-dotfiles-mode))
#+end_src

  Some times I like using GNU Emacs in my terminal. As a terminal I use iTerm2. The following chunk makes it possible to use mouse when GNU Emacs runs in iTerm2. This can be helpful if you struggle with the navigation key bindings. I keep this chunk just to be safe.

#+NAME: iTerm2_mouse
#+begin_src emacs-lisp :eval never
    (unless window-system
      (require 'mouse)
      (xterm-mouse-mode t)
      (defun track-mouse (e)) 
      (setq mouse-sel-mode t))
#+end_src



